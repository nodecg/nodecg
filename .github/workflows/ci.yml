name: CI

on:
  push:
    branches:
      - main
      - next
  pull_request:
    branches:
      - main
      - next

permissions:
  contents: write
  pull-requests: write
  packages: write

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: npm
      - run: npm ci
      - run: npm run lint

  test-types:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: npm
      - run: npm ci
      - run: npm run build
      - run: npm run typetest

  build-test:
    strategy:
      matrix:
        node-version:
          - 18
          - 20
          - 22
        os:
          - ubuntu-latest
          - windows-latest
    runs-on: ${{matrix.os}}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{matrix.node-version}}
          cache: npm

      - name: Ensure that bundle git parsing functionality works
        run: |
          git config --global user.email "ci@nodecg.dev"
          git config --global user.name "NodeCG Bot"

      - name: Restore Puppeteer cache (Linux)
        if: runner.os == 'Linux'
        uses: actions/cache@v4
        with:
          path: |
            /home/runner/.cache/puppeteer
          key: puppeteer-${{ runner.os }}

      - name: Restore Puppeteer cache (Windows)
        if: runner.os == 'Windows'
        uses: actions/cache@v4
        with:
          path: |
            C:\Users\runneradmin\.cache\puppeteer
          key: puppeteer-${{ runner.os }}

      - run: npm ci
      - run: npm run build
      - run: npm test -- --coverage

      - if: matrix.os == 'ubuntu-latest' && matrix.node-version == '22'
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  pr-release:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    environment: PR Release
    needs:
      - lint
      - test-types
      - build-test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          registry-url: https://registry.npmjs.org
          cache: npm
      - run: npm ci
      - run: npm run build

      - run: |
          npx tsx scripts/prepare-prerelease.ts --version 0.0.0-pr${{ github.event.number }}.${{ github.sha }}
          npm publish --tag pr${{ github.event.number }}
          npm --workspaces publish --tag pr${{ github.event.number }}
          npx tsx scripts/prepare-publish-types.ts
          npm publish --tag pr${{ github.event.number }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  pr-dry-run-container-build:
    if: github.event_name == 'pull_request'
    strategy:
      matrix:
        os:
          - ubuntu-24.04
          - ubuntu-24.04-arm
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release-please:
    if: github.event_name == 'push' && github.ref_name == 'main'
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      release_name: ${{ steps.release.outputs.name }}
    steps:
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          config-file: release-please-config.json

  publish:
    needs:
      - release-please
      - lint
      - test-types
      - build-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          registry-url: https://registry.npmjs.org
          cache: npm

      - run: npm ci
      - run: npm run build

      - if: ${{ needs.release-please.outputs.release_created }}
        run: gh release upload ${{ needs.release-please.outputs.release_name }} $(npm pack)
        env:
          GH_TOKEN: ${{ github.token }}

      - if: ${{ needs.release-please.outputs.release_created }}
        run: |
          npm publish
          npm --workspaces publish
          npx tsx scripts/prepare-publish-types.ts
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - if: ${{ !needs.release-please.outputs.release_created }}
        run: |
          npx tsx scripts/prepare-prerelease.ts --version 0.0.0-canary.${{ github.sha }}
          npm publish --tag canary
          npm --workspaces publish --tag canary
          npx tsx scripts/prepare-publish-types.ts
          npm publish --tag canary
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  docker-image:
    needs:
      - release-please
      - lint
      - test-types
      - build-test
    if: ${{ needs.release-please.outputs.release_created }}
    strategy:
      matrix:
        os:
          - ubuntu-24.04
          - ubuntu-24.04-arm
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
      - uses: docker/metadata-action@v5
        id: meta
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{major}}.{{minor}}.{{patch}},value=${{ needs.release-please.outputs.release_name }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.release-please.outputs.release_name }}
            type=semver,pattern={{major}},value=${{ needs.release-please.outputs.release_name }}
      - uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
