name: CI

on:
  push:
    branches:
      - main
      - next
  pull_request:
    branches:
      - main
      - next

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint

  test-types:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Test types
        run: npm run typetest

  build-test:
    strategy:
      matrix:
        node-version:
          - "18"
          - "20"
          - "22"
        os:
          - ubuntu-latest
          - windows-latest

    runs-on: ${{matrix.os}}

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{matrix.node-version}}

      - name: Add msbuild to PATH
        if: runner.os == 'Windows'
        uses: microsoft/setup-msbuild@v1.1

      - name: Ensure that bundle git parsing functionality works
        run: |
          git config --global user.email "ci@nodecg.dev"
          git config --global user.name "NodeCG Bot"

      - name: Restore Chromium dependency cache (Linux)
        uses: actions/cache@v3
        with:
          path: |
            /home/runner/.cache/puppeteer
          key: chromium-${{ runner.os }}-${{ matrix.node-version }}-${{ hashFiles('package-lock.json') }}
        if: runner.os == 'Linux'

      - name: Restore Chromium dependency cache (Windows)
        uses: actions/cache@v3
        with:
          path: |
            C:\Users\runneradmin\.cache\puppeteer
          key: chromium-${{ runner.os }}-${{ matrix.node-version }}-${{ hashFiles('package-lock.json') }}
        if: runner.os == 'Windows'

      - run: npm ci

      - run: npm run build

      - run: npm run test

      - if: matrix.os == 'ubuntu-latest' && matrix.node-version == '22'
        uses: codecov/codecov-action@v3

  dry-run-container-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/build-push-action@v5
        with:
          context: .
          push: false

  canary-publish:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref_name == 'main'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "22"
          registry-url: "https://registry.npmjs.org"
          cache: npm
      - run: npm ci
      - run: npm run build
      - run: |
          npm version 0.0.0-canary.${{ github.sha }} --no-git-tag-version
          npm publish --tag canary
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - run: npx tsx scripts/sync-version.ts
      - run: npm publish --access public
        working-directory: ./generated-types
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
